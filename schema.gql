"""Direct the client to resolve this field locally, either from the cache or local resolvers."""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!
  """An array of query argument names to include in the generated custom store key."""
  filter: [String!]
) on FIELD

"""The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."""
scalar JSON

"""A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."""
scalar DateTime

"""A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."""
scalar Date

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type Pagination {
  total: Int!
  page: Int!
  pageSize: Int!
  pageCount: Int!
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

enum PublicationState {
  LIVE
  PREVIEW
}

input IDFilterInput {
  and: [ID]
  or: [ID]
  not: IDFilterInput
  eq: ID
  eqi: ID
  ne: ID
  startsWith: ID
  endsWith: ID
  contains: ID
  notContains: ID
  containsi: ID
  notContainsi: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  null: Boolean
  notNull: Boolean
  in: [ID]
  notIn: [ID]
  between: [ID]
}

input BooleanFilterInput {
  and: [Boolean]
  or: [Boolean]
  not: BooleanFilterInput
  eq: Boolean
  eqi: Boolean
  ne: Boolean
  startsWith: Boolean
  endsWith: Boolean
  contains: Boolean
  notContains: Boolean
  containsi: Boolean
  notContainsi: Boolean
  gt: Boolean
  gte: Boolean
  lt: Boolean
  lte: Boolean
  null: Boolean
  notNull: Boolean
  in: [Boolean]
  notIn: [Boolean]
  between: [Boolean]
}

input StringFilterInput {
  and: [String]
  or: [String]
  not: StringFilterInput
  eq: String
  eqi: String
  ne: String
  startsWith: String
  endsWith: String
  contains: String
  notContains: String
  containsi: String
  notContainsi: String
  gt: String
  gte: String
  lt: String
  lte: String
  null: Boolean
  notNull: Boolean
  in: [String]
  notIn: [String]
  between: [String]
}

input IntFilterInput {
  and: [Int]
  or: [Int]
  not: IntFilterInput
  eq: Int
  eqi: Int
  ne: Int
  startsWith: Int
  endsWith: Int
  contains: Int
  notContains: Int
  containsi: Int
  notContainsi: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  null: Boolean
  notNull: Boolean
  in: [Int]
  notIn: [Int]
  between: [Int]
}

input FloatFilterInput {
  and: [Float]
  or: [Float]
  not: FloatFilterInput
  eq: Float
  eqi: Float
  ne: Float
  startsWith: Float
  endsWith: Float
  contains: Float
  notContains: Float
  containsi: Float
  notContainsi: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  null: Boolean
  notNull: Boolean
  in: [Float]
  notIn: [Float]
  between: [Float]
}

input DateFilterInput {
  and: [Date]
  or: [Date]
  not: DateFilterInput
  eq: Date
  eqi: Date
  ne: Date
  startsWith: Date
  endsWith: Date
  contains: Date
  notContains: Date
  containsi: Date
  notContainsi: Date
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  null: Boolean
  notNull: Boolean
  in: [Date]
  notIn: [Date]
  between: [Date]
}

input DateTimeFilterInput {
  and: [DateTime]
  or: [DateTime]
  not: DateTimeFilterInput
  eq: DateTime
  eqi: DateTime
  ne: DateTime
  startsWith: DateTime
  endsWith: DateTime
  contains: DateTime
  notContains: DateTime
  containsi: DateTime
  notContainsi: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  null: Boolean
  notNull: Boolean
  in: [DateTime]
  notIn: [DateTime]
  between: [DateTime]
}

input JSONFilterInput {
  and: [JSON]
  or: [JSON]
  not: JSONFilterInput
  eq: JSON
  eqi: JSON
  ne: JSON
  startsWith: JSON
  endsWith: JSON
  contains: JSON
  notContains: JSON
  containsi: JSON
  notContainsi: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  null: Boolean
  notNull: Boolean
  in: [JSON]
  notIn: [JSON]
  between: [JSON]
}

input ComponentPageButtonFiltersInput {
  label: StringFilterInput
  link: StringFilterInput
  and: [ComponentPageButtonFiltersInput]
  or: [ComponentPageButtonFiltersInput]
  not: ComponentPageButtonFiltersInput
}

input ComponentPageButtonInput {
  id: ID
  label: String
  link: String
}

type ComponentPageButton {
  id: ID!
  label: String!
  link: String!
}

enum ENUM_COMPONENTPAGEHIGHLIGHT_ALIGNMENT {
  right
  left
}

input ComponentPageHighlightInput {
  id: ID
  title: String
  subtitle: String
  background: ID
  floatImage: ID
  buttonLabel: String
  buttonLink: String
  alignment: ENUM_COMPONENTPAGEHIGHLIGHT_ALIGNMENT
}

type ComponentPageHighlight {
  id: ID!
  title: String!
  subtitle: String!
  background: UploadFileEntityResponse!
  floatImage: UploadFileEntityResponse
  buttonLabel: String!
  buttonLink: String!
  alignment: ENUM_COMPONENTPAGEHIGHLIGHT_ALIGNMENT
}

input ComponentPagePopularGamesInput {
  id: ID
  title: String
  highlight: ComponentPageHighlightInput
  games: [ID]
}

type ComponentPagePopularGames {
  id: ID!
  title: String!
  highlight: ComponentPageHighlight
  games(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): GameRelationResponseCollection
}

enum ENUM_COMPONENTPAGERIBBON_COLOR {
  primary
  secondary
}

enum ENUM_COMPONENTPAGERIBBON_SIZE {
  small
  normal
}

input ComponentPageRibbonFiltersInput {
  text: StringFilterInput
  color: StringFilterInput
  size: StringFilterInput
  and: [ComponentPageRibbonFiltersInput]
  or: [ComponentPageRibbonFiltersInput]
  not: ComponentPageRibbonFiltersInput
}

input ComponentPageRibbonInput {
  id: ID
  text: String
  color: ENUM_COMPONENTPAGERIBBON_COLOR
  size: ENUM_COMPONENTPAGERIBBON_SIZE
}

type ComponentPageRibbon {
  id: ID!
  text: String
  color: ENUM_COMPONENTPAGERIBBON_COLOR
  size: ENUM_COMPONENTPAGERIBBON_SIZE
}

input ComponentPageSectionInput {
  id: ID
  title: String
  highlight: ComponentPageHighlightInput
}

type ComponentPageSection {
  id: ID!
  title: String
  highlight: ComponentPageHighlight
}

input UploadFileFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  alternativeText: StringFilterInput
  caption: StringFilterInput
  width: IntFilterInput
  height: IntFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  ext: StringFilterInput
  mime: StringFilterInput
  size: FloatFilterInput
  url: StringFilterInput
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UploadFileFiltersInput]
  or: [UploadFileFiltersInput]
  not: UploadFileFiltersInput
}

input UploadFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  folder: ID
  folderPath: String
}

type UploadFile {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  createdAt: DateTime
  updatedAt: DateTime
}

type UploadFileEntity {
  id: ID
  attributes: UploadFile
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

input UploadFolderFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  pathId: IntFilterInput
  parent: UploadFolderFiltersInput
  children: UploadFolderFiltersInput
  files: UploadFileFiltersInput
  path: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UploadFolderFiltersInput]
  or: [UploadFolderFiltersInput]
  not: UploadFolderFiltersInput
}

input UploadFolderInput {
  name: String
  pathId: Int
  parent: ID
  children: [ID]
  files: [ID]
  path: String
}

type UploadFolder {
  name: String!
  pathId: Int!
  parent: UploadFolderEntityResponse
  children(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderRelationResponseCollection
  files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  path: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type UploadFolderEntity {
  id: ID
  attributes: UploadFolder
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

input I18NLocaleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [I18NLocaleFiltersInput]
  or: [I18NLocaleFiltersInput]
  not: I18NLocaleFiltersInput
}

type I18NLocale {
  name: String
  code: String
  createdAt: DateTime
  updatedAt: DateTime
}

type I18NLocaleEntity {
  id: ID
  attributes: I18NLocale
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  id: IDFilterInput
  action: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  or: [UsersPermissionsPermissionFiltersInput]
  not: UsersPermissionsPermissionFiltersInput
}

type UsersPermissionsPermission {
  action: String!
  role: UsersPermissionsRoleEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  id: ID
  attributes: UsersPermissionsPermission
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRoleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  type: StringFilterInput
  permissions: UsersPermissionsPermissionFiltersInput
  users: UsersPermissionsUserFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsRoleFiltersInput]
  or: [UsersPermissionsRoleFiltersInput]
  not: UsersPermissionsRoleFiltersInput
}

input UsersPermissionsRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type UsersPermissionsRole {
  name: String!
  description: String
  type: String
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsRoleEntity {
  id: ID
  attributes: UsersPermissionsRole
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  id: IDFilterInput
  username: StringFilterInput
  email: StringFilterInput
  provider: StringFilterInput
  password: StringFilterInput
  resetPasswordToken: StringFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  blocked: BooleanFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsUserFiltersInput]
  or: [UsersPermissionsUserFiltersInput]
  not: UsersPermissionsUserFiltersInput
}

input UsersPermissionsUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsUser {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRoleEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsUserEntity {
  id: ID
  attributes: UsersPermissionsUser
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}

input BannerFiltersInput {
  id: IDFilterInput
  title: StringFilterInput
  subtitle: StringFilterInput
  button: ComponentPageButtonFiltersInput
  ribbon: ComponentPageRibbonFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [BannerFiltersInput]
  or: [BannerFiltersInput]
  not: BannerFiltersInput
}

input BannerInput {
  image: ID
  title: String
  subtitle: String
  button: ComponentPageButtonInput
  ribbon: ComponentPageRibbonInput
  publishedAt: DateTime
}

type Banner {
  image: UploadFileEntityResponse!
  title: String!
  subtitle: String!
  button: ComponentPageButton
  ribbon: ComponentPageRibbon
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type BannerEntity {
  id: ID
  attributes: Banner
}

type BannerEntityResponse {
  data: BannerEntity
}

type BannerEntityResponseCollection {
  data: [BannerEntity!]!
  meta: ResponseCollectionMeta!
}

input CategoryFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  slug: StringFilterInput
  games: GameFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [CategoryFiltersInput]
  or: [CategoryFiltersInput]
  not: CategoryFiltersInput
}

input CategoryInput {
  name: String
  slug: String
  games: [ID]
}

type Category {
  name: String!
  slug: String!
  games(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): GameRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
}

type CategoryEntity {
  id: ID
  attributes: Category
}

type CategoryEntityResponse {
  data: CategoryEntity
}

type CategoryEntityResponseCollection {
  data: [CategoryEntity!]!
  meta: ResponseCollectionMeta!
}

type CategoryRelationResponseCollection {
  data: [CategoryEntity!]!
}

input DeveloperFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  slug: StringFilterInput
  games: GameFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [DeveloperFiltersInput]
  or: [DeveloperFiltersInput]
  not: DeveloperFiltersInput
}

input DeveloperInput {
  name: String
  slug: String
  games: [ID]
}

type Developer {
  name: String!
  slug: String!
  games(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): GameRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
}

type DeveloperEntity {
  id: ID
  attributes: Developer
}

type DeveloperEntityResponse {
  data: DeveloperEntity
}

type DeveloperEntityResponseCollection {
  data: [DeveloperEntity!]!
  meta: ResponseCollectionMeta!
}

type DeveloperRelationResponseCollection {
  data: [DeveloperEntity!]!
}

enum ENUM_GAME_RATING {
  BR0
  BR10
  BR12
  BR14
  BR16
  BR18
}

input GameFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  slug: StringFilterInput
  short_description: StringFilterInput
  description: StringFilterInput
  price: FloatFilterInput
  release_date: DateFilterInput
  rating: StringFilterInput
  categories: CategoryFiltersInput
  developers: DeveloperFiltersInput
  platforms: PlatformFiltersInput
  publisher: PublisherFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [GameFiltersInput]
  or: [GameFiltersInput]
  not: GameFiltersInput
}

input GameInput {
  name: String
  slug: String
  short_description: String
  description: String
  price: Float
  release_date: Date
  rating: ENUM_GAME_RATING
  cover: ID
  gallery: [ID]
  categories: [ID]
  developers: [ID]
  platforms: [ID]
  publisher: ID
}

type Game {
  name: String!
  slug: String!
  short_description: String!
  description: String!
  price: Float!
  release_date: Date
  rating: ENUM_GAME_RATING
  cover: UploadFileEntityResponse
  gallery(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  categories(filters: CategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): CategoryRelationResponseCollection
  developers(filters: DeveloperFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): DeveloperRelationResponseCollection
  platforms(filters: PlatformFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): PlatformRelationResponseCollection
  publisher: PublisherEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type GameEntity {
  id: ID
  attributes: Game
}

type GameEntityResponse {
  data: GameEntity
}

type GameEntityResponseCollection {
  data: [GameEntity!]!
  meta: ResponseCollectionMeta!
}

type GameRelationResponseCollection {
  data: [GameEntity!]!
}

input HomeInput {
  newGames: ComponentPageSectionInput
  upcomingGames: ComponentPageSectionInput
  freeGames: ComponentPageSectionInput
  popularGames: ComponentPagePopularGamesInput
  publishedAt: DateTime
}

type Home {
  newGames: ComponentPageSection
  upcomingGames: ComponentPageSection
  freeGames: ComponentPageSection
  popularGames: ComponentPagePopularGames
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type HomeEntity {
  id: ID
  attributes: Home
}

type HomeEntityResponse {
  data: HomeEntity
}

input PlatformFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  slug: StringFilterInput
  games: GameFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [PlatformFiltersInput]
  or: [PlatformFiltersInput]
  not: PlatformFiltersInput
}

input PlatformInput {
  name: String
  slug: String
  games: [ID]
}

type Platform {
  name: String!
  slug: String!
  games(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): GameRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
}

type PlatformEntity {
  id: ID
  attributes: Platform
}

type PlatformEntityResponse {
  data: PlatformEntity
}

type PlatformEntityResponseCollection {
  data: [PlatformEntity!]!
  meta: ResponseCollectionMeta!
}

type PlatformRelationResponseCollection {
  data: [PlatformEntity!]!
}

input PublisherFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  slug: StringFilterInput
  games: GameFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [PublisherFiltersInput]
  or: [PublisherFiltersInput]
  not: PublisherFiltersInput
}

input PublisherInput {
  name: String
  slug: String
  games: [ID]
}

type Publisher {
  name: String!
  slug: String!
  games(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): GameRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
}

type PublisherEntity {
  id: ID
  attributes: Publisher
}

type PublisherEntityResponse {
  data: PublisherEntity
}

type PublisherEntityResponseCollection {
  data: [PublisherEntity!]!
  meta: ResponseCollectionMeta!
}

input RecommendedInput {
  section: ComponentPagePopularGamesInput
}

type Recommended {
  section: ComponentPagePopularGames!
  createdAt: DateTime
  updatedAt: DateTime
}

type RecommendedEntity {
  id: ID
  attributes: Recommended
}

type RecommendedEntityResponse {
  data: RecommendedEntity
}

union GenericMorph = ComponentPageButton | ComponentPageHighlight | ComponentPagePopularGames | ComponentPageRibbon | ComponentPageSection | UploadFile | UploadFolder | I18NLocale | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser | Banner | Category | Developer | Game | Home | Platform | Publisher | Recommended

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input PaginationArg {
  page: Int
  pageSize: Int
  start: Int
  limit: Int
}

type Query {
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderEntityResponseCollection
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
  banner(id: ID): BannerEntityResponse
  banners(filters: BannerFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): BannerEntityResponseCollection
  category(id: ID): CategoryEntityResponse
  categories(filters: CategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): CategoryEntityResponseCollection
  developer(id: ID): DeveloperEntityResponse
  developers(filters: DeveloperFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): DeveloperEntityResponseCollection
  game(id: ID): GameEntityResponse
  games(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): GameEntityResponseCollection
  home(publicationState: PublicationState = LIVE): HomeEntityResponse
  platform(id: ID): PlatformEntityResponse
  platforms(filters: PlatformFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): PlatformEntityResponseCollection
  publisher(id: ID): PublisherEntityResponse
  publishers(filters: PublisherFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): PublisherEntityResponseCollection
  recommended: RecommendedEntityResponse
  me: UsersPermissionsMe
}

type Mutation {
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  updateUploadFile(id: ID!, data: UploadFileInput!): UploadFileEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse
  updateUploadFolder(id: ID!, data: UploadFolderInput!): UploadFolderEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse
  createBanner(data: BannerInput!): BannerEntityResponse
  updateBanner(id: ID!, data: BannerInput!): BannerEntityResponse
  deleteBanner(id: ID!): BannerEntityResponse
  createCategory(data: CategoryInput!): CategoryEntityResponse
  updateCategory(id: ID!, data: CategoryInput!): CategoryEntityResponse
  deleteCategory(id: ID!): CategoryEntityResponse
  createDeveloper(data: DeveloperInput!): DeveloperEntityResponse
  updateDeveloper(id: ID!, data: DeveloperInput!): DeveloperEntityResponse
  deleteDeveloper(id: ID!): DeveloperEntityResponse
  createGame(data: GameInput!): GameEntityResponse
  updateGame(id: ID!, data: GameInput!): GameEntityResponse
  deleteGame(id: ID!): GameEntityResponse
  updateHome(data: HomeInput!): HomeEntityResponse
  deleteHome: HomeEntityResponse
  createPlatform(data: PlatformInput!): PlatformEntityResponse
  updatePlatform(id: ID!, data: PlatformInput!): PlatformEntityResponse
  deletePlatform(id: ID!): PlatformEntityResponse
  createPublisher(data: PublisherInput!): PublisherEntityResponse
  updatePublisher(id: ID!, data: PublisherInput!): PublisherEntityResponse
  deletePublisher(id: ID!): PublisherEntityResponse
  updateRecommended(data: RecommendedInput!): RecommendedEntityResponse
  deleteRecommended: RecommendedEntityResponse
  upload(refId: ID, ref: String, field: String, info: FileInfoInput, file: Upload!): UploadFileEntityResponse!
  multipleUpload(refId: ID, ref: String, field: String, files: [Upload]!): [UploadFileEntityResponse]!
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  removeFile(id: ID!): UploadFileEntityResponse
  """Create a new role"""
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload
  """Update an existing role"""
  updateUsersPermissionsRole(id: ID!, data: UsersPermissionsRoleInput!): UsersPermissionsUpdateRolePayload
  """Delete an existing role"""
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload
  """Create a new user"""
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  """Update an existing user"""
  updateUsersPermissionsUser(id: ID!, data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  """Delete an existing user"""
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  """Register a user"""
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  """Request a reset password token"""
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  """Reset user password. Confirm with a code (resetToken from forgotPassword)"""
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  """Change user password. Confirm with the current password."""
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  """Confirm an email users email address"""
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}
